$date
	Sat Apr 12 15:59:33 2025
$end
$version
	QuestaSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module adder_tb $end

$scope module tif $end
$var reg 1 ! clk $end
$var reg 1 " rstn $end
$var reg 5 # a [4:0] $end
$var reg 5 $ b [4:0] $end
$var reg 6 % y [5:0] $end
$upscope $end
$upscope $end

$scope module uvm_root $end
$upscope $end

$scope module adder_tb $end
$upscope $end

$scope begin uvm_pkg $end
$var parameter 32 & UVM_HDL_MAX_WIDTH $end
$var parameter 32 ' UVM_STREAMBITS $end
$var parameter 32 ( UVM_RADIX $end
$var parameter 32 ) UVM_MACRO_NUMFLAGS $end
$var parameter 32 * UVM_DEFAULT $end
$var parameter 32 + UVM_ALL_ON $end
$var parameter 32 , UVM_FLAGS_ON $end
$var parameter 32 - UVM_FLAGS_OFF $end
$var parameter 32 . UVM_COPY $end
$var parameter 32 / UVM_NOCOPY $end
$var parameter 32 0 UVM_COMPARE $end
$var parameter 32 1 UVM_NOCOMPARE $end
$var parameter 32 2 UVM_PRINT $end
$var parameter 32 3 UVM_NOPRINT $end
$var parameter 32 4 UVM_RECORD $end
$var parameter 32 5 UVM_NORECORD $end
$var parameter 32 6 UVM_PACK $end
$var parameter 32 7 UVM_NOPACK $end
$var parameter 32 8 UVM_PHYSICAL $end
$var parameter 32 9 UVM_ABSTRACT $end
$var parameter 32 : UVM_READONLY $end
$var parameter 32 ; UVM_NODEFPRINT $end
$var parameter 32 < UVM_MACRO_EXTRAS $end
$var parameter 32 = UVM_FLAGS $end
$var parameter 32 > UVM_UNPACK $end
$var parameter 32 ? UVM_CHECK_FIELDS $end
$var parameter 32 @ UVM_END_DATA_EXTRA $end
$var parameter 32 A UVM_START_FUNCS $end
$var parameter 32 B UVM_SET $end
$var parameter 32 C UVM_SETINT $end
$var parameter 32 D UVM_SETOBJ $end
$var parameter 32 E UVM_SETSTR $end
$var parameter 32 F UVM_END_FUNCS $end
$var parameter 32 G UVM_STR_CRC_POLYNOMIAL $end
$var parameter 32 H UVM_STDOUT $end
$var parameter 32 I UVM_LINE_WIDTH $end
$var parameter 32 J UVM_NUM_LINES $end
$var parameter 32 K UVM_SMALL_STRING $end
$var parameter 32 L UVM_LARGE_STRING $end
$var reg 1 M uvm_start_uvm_declarations $end
$var integer 32 N uvm_global_random_seed $end
$var integer 32 O UVM_UNBOUNDED_CONNECTIONS $end

$scope function uvm_hdl_check_path $end
$var integer 32 P uvm_hdl_check_path $end
$upscope $end

$scope function uvm_hdl_deposit $end
$var integer 32 Q uvm_hdl_deposit $end
$var reg 1024 R value [1023:0] $end
$upscope $end

$scope function uvm_hdl_force $end
$var integer 32 S uvm_hdl_force $end
$var reg 1024 T value [1023:0] $end
$upscope $end

$scope task uvm_hdl_force_time $end
$var reg 1024 U value [1023:0] $end
$var time 64 V force_time $end
$upscope $end

$scope function uvm_hdl_release_and_read $end
$var integer 32 W uvm_hdl_release_and_read $end
$var reg 1024 X value [1023:0] $end
$upscope $end

$scope function uvm_hdl_release $end
$var integer 32 Y uvm_hdl_release $end
$upscope $end

$scope function uvm_hdl_read $end
$var integer 32 Z uvm_hdl_read $end
$var reg 1024 [ value [1023:0] $end
$upscope $end

$scope function uvm_dpi_get_next_arg_c $end
$upscope $end

$scope function uvm_dpi_get_tool_name_c $end
$upscope $end

$scope function uvm_dpi_get_tool_version_c $end
$upscope $end

$scope function uvm_dpi_get_next_arg $end
$upscope $end

$scope function uvm_dpi_get_tool_name $end
$upscope $end

$scope function uvm_dpi_get_tool_version $end
$upscope $end

$scope function uvm_dpi_regcomp $end
$upscope $end

$scope function uvm_dpi_regexec $end
$var integer 32 \ uvm_dpi_regexec $end
$upscope $end

$scope function uvm_dpi_regfree $end
$upscope $end

$scope function uvm_re_match $end
$var integer 32 ] uvm_re_match $end
$upscope $end

$scope function uvm_dump_re_cache $end
$upscope $end

$scope function uvm_glob_to_re $end
$upscope $end

$scope function uvm_revision_string $end
$upscope $end

$scope function uvm_radix_to_string $end
$var integer 32 ^ radix $end
$upscope $end

$scope function uvm_instance_scope $end
$var reg 8 _ c [7:0] $end
$var integer 32 ` pos $end
$upscope $end

$scope function uvm_oneway_hash $end
$var integer 32 a uvm_oneway_hash $end
$var integer 32 b seed $end
$var reg 1 c msb $end
$var reg 8 d current_byte [7:0] $end
$var reg 32 e crc1 [31:0] $end
$upscope $end

$scope function uvm_create_random_seed $end
$var integer 32 f uvm_create_random_seed $end
$upscope $end

$scope function uvm_object_value_str $end
$upscope $end

$scope function uvm_leaf_scope $end
$var reg 8 g scope_separator [7:0] $end
$var reg 8 h bracket_match [7:0] $end
$var integer 32 i pos $end
$var integer 32 j bmatches $end
$upscope $end

$scope function uvm_vector_to_string $end
$var reg 4096 k value [4095:0] $end
$var integer 32 l size $end
$var integer 32 m radix $end
$upscope $end

$scope function uvm_get_array_index_int $end
$var integer 32 n uvm_get_array_index_int $end
$var reg 1 o is_wildcard $end
$var integer 32 p i $end
$upscope $end

$scope function uvm_get_array_index_string $end
$var reg 1 q is_wildcard $end
$var integer 32 r i $end
$upscope $end

$scope function uvm_is_array $end
$var reg 1 s uvm_is_array $end
$upscope $end

$scope function uvm_has_wildcard $end
$upscope $end

$scope task run_test $end
$upscope $end

$scope function global_stop_request $end
$upscope $end

$scope function set_global_timeout $end
$var time 64 t timeout $end
$var reg 1 u overridable $end
$upscope $end

$scope function set_global_stop_timeout $end
$var time 64 v timeout $end
$upscope $end

$scope function uvm_report_enabled $end
$var reg 1 w uvm_report_enabled $end
$var integer 32 x verbosity $end
$var reg 2 y severity [1:0] $end
$upscope $end

$scope function uvm_report $end
$var reg 2 z severity [1:0] $end
$var integer 32 { verbosity $end
$var integer 32 | line $end
$upscope $end

$scope function uvm_report_info $end
$var integer 32 } verbosity $end
$var integer 32 ~ line $end
$upscope $end

$scope function uvm_report_warning $end
$var integer 32 !! verbosity $end
$var integer 32 "! line $end
$upscope $end

$scope function uvm_report_error $end
$var integer 32 #! verbosity $end
$var integer 32 $! line $end
$upscope $end

$scope function uvm_report_fatal $end
$var integer 32 %! verbosity $end
$var integer 32 &! line $end
$upscope $end

$scope function uvm_string_to_severity $end
$var reg 1 '! uvm_string_to_severity $end
$var reg 2 (! sev [1:0] $end
$upscope $end

$scope function uvm_string_to_action $end
$upscope $end

$scope function set_config_int $end
$var reg 4096 )! value [4095:0] $end
$upscope $end

$scope function set_config_object $end
$var reg 1 *! clone $end
$upscope $end

$scope function set_config_string $end
$upscope $end

$scope function uvm_is_match $end
$var reg 1 +! uvm_is_match $end
$upscope $end

$scope function uvm_string_to_bits $end
$var reg 115200 ,! uvm_string_to_bits [115199:0] $end
$upscope $end

$scope function uvm_bits_to_string $end
$var reg 115200 -! str [115199:0] $end
$upscope $end

$scope task uvm_wait_for_nba_region $end
$var integer 32 .! nba $end
$var integer 32 /! next_nba $end
$upscope $end

$scope function uvm_split_string $end
$upscope $end

$scope function uvm_hdl_concat2string $end
$upscope $end
$upscope $end

$scope begin adder_pkg $end
$upscope $end

$scope begin std $end
$upscope $end

$scope begin questa_uvm_pkg $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0q
0s
0'!
b0 (!
bx ,!
bx -!
bx R
bx T
bx U
bx X
bx [
1M
0c
b1110100 d
b101100000100101011011010010000 e
bx k
0o
0u
0w
b0 y
b0 z
bx )!
0*!
0+!
0!
0"
b0 #
b0 $
b0 %
b10000000000 &
b1000000000000 '
b1111000000000000000000000000 (
b10001 )
b10101010101 *
b101010101 +
b101010101 ,
b0 -
b1 .
b10 /
b100 0
b1000 1
b10000 2
b100000 3
b1000000 4
b10000000 5
b100000000 6
b1000000000 7
b10000000000000 8
b100000000000000 9
b1000000000000000 :
b10000000000000000 ;
b100000000000000000 <
b100000000000000001 =
b100000000000000010 >
b100000000000000011 ?
b100000000000000100 @
b100000000000000101 A
b100000000000000110 B
b100000000000000110 C
b100000000000000111 D
b100000000000001000 E
b100000000000001000 F
b100110000010001110110110110 G
b1 H
b1111000 I
b1111000 J
b1110111111 K
b11100000111111111 L
b0 ^
b0 g
b0 h
b0 i
b0 j
b0 r
b0 P
b0 Q
b0 S
b0 W
b0 Y
b0 Z
b1 \
b0 ]
b1101001011000001111100000011110 N
b101110 _
b111 `
b11011000101010101110010111110001 a
b1101001011000001111100000011110 b
b10011110101100000101011011000111 f
b0 l
b0 m
b0 n
b0 p
b111110100 x
b0 {
b0 |
b11001000 }
b11011000 ~
b0 !!
b0 "!
b0 #!
b0 $!
b0 %!
b0 &!
b100011 .!
b100011 /!
b11111111111111111111111111111111 O
bx V
bx t
bx v
$end
#10
1!
#20
0!
#30
1!
#40
0!
#50
1!
#60
0!
#70
1!
#80
0!
#90
1!
b100100 /!
1"
b100100 .!
b11011000101010101110010111110010 f
b10111 #
b1001 $
#100
0!
#110
1!
b100000 %
#120
0!
#130
1!
b100101 /!
b100101 .!
b11011000101010101110010111110100 f
b10011 #
b100 $
#140
0!
#150
1!
b10111 %
#160
0!
#170
1!
b100110 /!
b100110 .!
b11011000101010101110010111110111 f
b11011 #
b11101 $
#180
0!
#190
1!
b111000 %
#200
0!
#210
1!
b100111 /!
b100111 .!
b11011000101010101110010111111011 f
b10001 #
b11111 $
#220
0!
#230
1!
b110000 %
#240
0!
#250
1!
b101000 /!
b101000 .!
b11011000101010101110011000000000 f
b11 #
b1011 $
#260
0!
#270
1!
b1110 %
#280
0!
#290
1!
b101001 /!
b101001 .!
b11011000101010101110011000000110 f
b100 #
b11010 $
#300
0!
#310
1!
b11110 %
#320
0!
#330
1!
b101010 /!
b101010 .!
b11011000101010101110011000001101 f
b11011 #
#340
0!
#350
1!
b110101 %
#360
0!
#370
1!
b101011 /!
b101011 .!
b11011000101010101110011000010101 f
b11100 #
b11111 $
#380
0!
#390
1!
b111011 %
#400
0!
#410
1!
b101100 /!
b101100 .!
b11011000101010101110011000011110 f
b111 #
b1111 $
#420
0!
#430
1!
b10110 %
#440
0!
#450
1!
b101101 /!
b101101 .!
b1010 #
b10001 $
#460
0!
#470
1!
b11011 %
#480
0!
#490
1!
b101110 /!
b101111 /!
b110000 /!
b101110 .!
b101111 .!
b110000 .!
b110001 /!
b110010 /!
b110001 .!
b110010 .!
b10011110101100000101011011011001 f
b11001101001110100010000011011110 f
b11010101110111100010100100101010 f
b10100011111111110111011011000010 f
b10101010101111011110010001011 f
b101011001011111001100101001 f
b11010000100000100010000011000111 f
b1001100001010010101100010101110 f
b11111001011101000110000011001001 f
b10100110000100010000001000110111 f
b1100101100001000100010101111101 f
b10000001010100001111001010001101 f
b10110110110100100100101001101001 f
b11101100000001101010010010111100 f
b11001100000110011101010101010 f
b1100101110010100000011100111111 f
b11011001000000010011011000100100 f
b11101100010001100010100101100100 f
b111000101000011100110011010010 f
b10110011110000000100000100101010 f
b11000010101100010101010000110100 f
b10101111010011111001000011110111 f
b10100010000010011100111101111010 f
b111000011000110011100110101111 f
b11011100000111001000010000111110 f
b10011110101100000101011011101100 f
b11001101001110100010000011110001 f
b11010101110111100010100100111101 f
b10100011111111110111011011010101 f
b10101010101111011110010011110 f
b101011001011111001100111100 f
b11010000100000100010000011011010 f
b1001100001010010101100011000001 f
b11111001011101000110000011011100 f
b10100110000100010000001001001010 f
b1100101100001000100010110010000 f
b10000001010100001111001010100000 f
b10110110110100100100101001111100 f
b11101100000001101010010011001111 f
b11001100000110011101010111101 f
b1100101110010100000011101010010 f
b11011001000000010011011000110111 f
b11101100010001100010100101110111 f
b111000101000011100110011100101 f
b10110011110000000100000100111101 f
b11000010101100010101010001000111 f
b10101111010011111001000100001010 f
b10100010000010011100111110001101 f
b111000011000110011100111000010 f
b11011100000111001000010001010001 f
b10011110101100000101011100000000 f
b11001101001110100010000100000101 f
b11010101110111100010100101010001 f
b10100011111111110111011011101001 f
b10101010101111011110010110010 f
b101011001011111001101010000 f
b11010000100000100010000011101110 f
b1001100001010010101100011010101 f
b11111001011101000110000011110000 f
b10100110000100010000001001011110 f
b1100101100001000100010110100100 f
b10000001010100001111001010110100 f
b10110110110100100100101010010000 f
b11101100000001101010010011100011 f
b11001100000110011101011010001 f
b1100101110010100000011101100110 f
b11011001000000010011011001001011 f
b11101100010001100010100110001011 f
b111000101000011100110011111001 f
b10110011110000000100000101010001 f
b11000010101100010101010001011011 f
b10101111010011111001000100011110 f
b10100010000010011100111110100001 f
b111000011000110011100111010110 f
b11011100000111001000010001100101 f
b11011100000111001000010001111010 f
b111000011000110011100111101011 f
b10100010000010011100111110110110 f
b10110011110000000100000101100110 f
b11010101110111100010100101100110 f
b10011110101100000101011100010101 f
b11001101001110100010000100011010 f
b10101010101111011110011000111 f
b10100011111111110111011011111110 f
b111000101000011100110100001110 f
b10100110000100010000001001110011 f
b101011001011111001101100101 f
b11010000100000100010000100000011 f
b1001100001010010101100011101010 f
b11111001011101000110000100000101 f
b1100101100001000100010110111001 f
b10000001010100001111001011001001 f
b11101100010001100010100110100000 f
b10110110110100100100101010100101 f
b11101100000001101010010011111000 f
b11001100000110011101011100110 f
b1100101110010100000011101111011 f
b11011001000000010011011001100000 f
b10101111010011111001000100110011 f
b11000010101100010101010001110000 f
